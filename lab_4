# -*- coding: utf-8 -*-
"""Лабораторная работа №4.ipynb


Работа с Excel
"""

import csv

import pandas as pd
import xlwings as xw

"""1. Загрузите данные из файлов `reviews_sample.csv` (__ЛР2__) и `recipes_sample.csv` (__ЛР5__) в виде `pd.DataFrame`. Обратите внимание на корректное считывание столбца(ов) с индексами. Оставьте в таблице с рецептами следующие столбцы: `id`, `name`, `minutes`, `submitted`, `description`, `n_ingredients`

"""

import pandas as pd

try:
    reviews = pd.read_csv('/content/drive/MyDrive/reviews_sample.csv', index_col=0)
    print("Данные из файла reviews_sample.csv успешно загружены.")
except Exception as e:
    print("Ошибка при загрузке данных из файла reviews_sample.csv:", e)

recipes = pd.read_csv('/content/drive/MyDrive/recipes_sample.csv', index_col=0)

print("Таблица с рецептами:")
print(recipes.head())

print("\nТаблица с отзывами:")
print(reviews.head())

"""2. Случайным образом выберите 5% строк из каждой таблицы и сохраните две таблицы на разные листы в один файл `recipes.xlsx`. Дайте листам названия \"Рецепты\" и \"Отзывы\", соответствующие содержанию таблиц."""

import pandas as pd

reviews = pd.read_csv('/content/drive/MyDrive/reviews_sample.csv')
recipes = pd.read_csv('/content/drive/MyDrive/recipes_sample.csv')
reviews_sampled = reviews.sample(frac=0.05, random_state=42)
recipes_sampled = recipes.sample(frac=0.05, random_state=42)

with pd.ExcelWriter('/content/drive/MyDrive/recipes.xlsx') as writer:
    recipes_sampled.to_excel(writer, sheet_name='Рецепты', index=False)
    reviews_sampled.to_excel(writer, sheet_name='Отзывы', index=False)

print("Данные сохранены в файл recipes.xlsx")

"""3. Используя `xlwings`, добавьте на лист `Рецепты` столбец `seconds_assign`, показывающий время выполнения рецепта в секундах. Выполните задание при помощи присваивания массива значений диапазону ячеек."""

from openpyxl import load_workbook

workbook = load_workbook('/content/drive/MyDrive/recipes.xlsx')
worksheet = workbook['Рецепты']
worksheet.cell(row=1, column=7, value='seconds_assign')

for row_idx in range(2, worksheet.max_row + 1):
    minutes = worksheet.cell(row=row_idx, column=3).value
    worksheet.cell(row=row_idx, column=7, value=minutes * 60)

workbook.save('/content/drive/MyDrive/recipes.xlsx')

"""4. Используя `xlwings`, добавьте на лист `Рецепты` столбец `seconds_formula`, показывающий время выполнения рецепта в секундах. Выполните задание при помощи формул Excel."""

workbook = load_workbook('/content/drive/MyDrive/recipes.xlsx')
worksheet = workbook['Рецепты']
worksheet.cell(row=1, column=8, value='seconds_formula')

for row_idx in range(2, worksheet.max_row + 1):
    worksheet.cell(row=row_idx, column=8, value=f'=C{row_idx}*60')

workbook.save('/content/drive/MyDrive/recipes.xlsx')

"""5. Сделайте названия всех добавленных столбцов полужирными и выровняйте по центру ячейки."""

from openpyxl.styles import Font, Alignment

workbook = load_workbook('/content/drive/MyDrive/recipes.xlsx')
worksheet = workbook['Рецепты']

for col_idx in range(1, worksheet.max_column + 1):
    cell = worksheet.cell(row=1, column=col_idx)
    cell.font = Font(bold=True)
    cell.alignment = Alignment(horizontal='center')

workbook.save('/content/drive/MyDrive/recipes.xlsx')

"""6. Раскрасьте ячейки столбца `minutes` в соответствии со следующим правилом: если рецепт выполняется быстрее 5 минут, то цвет - зеленый; от 5 до 10 минут - жёлтый; и больше 10 - красный."""

from openpyxl.styles import PatternFill

workbook = load_workbook('/content/drive/MyDrive/recipes.xlsx')
worksheet = workbook['Рецепты']

green_fill = PatternFill(start_color='00FF00', end_color='00FF00', fill_type='solid')
yellow_fill = PatternFill(start_color='FFFF00', end_color='FFFF00', fill_type='solid')
red_fill = PatternFill(start_color='FF0000', end_color='FF0000', fill_type='solid')

for row_idx in range(2, worksheet.max_row + 1):
    minutes = worksheet.cell(row=row_idx, column=3).value
    if minutes < 5:
        worksheet.cell(row=row_idx, column=3).fill = green_fill
    elif 5 <= minutes <= 10:
        worksheet.cell(row=row_idx, column=3).fill = yellow_fill
    else:
        worksheet.cell(row=row_idx, column=3).fill = red_fill

workbook.save('/content/drive/MyDrive/recipes.xlsx')

"""7. Добавьте на лист `Рецепты`  столбец `n_reviews`, содержащий кол-во отзывов для этого рецепта. Выполните задание при помощи формул Excel."""

from openpyxl import load_workbook

workbook = load_workbook('/content/drive/MyDrive/recipes.xlsx')
worksheet_recipes = workbook['Рецепты']
worksheet_reviews = workbook['Отзывы']

review_counts = {}
for row in worksheet_reviews.iter_rows(min_row=2, min_col=2, max_col=2, values_only=True):
    recipe_id = row[0]
    if recipe_id in review_counts:
        review_counts[recipe_id] += 1
    else:
        review_counts[recipe_id] = 1

n_reviews_col = worksheet_recipes.max_column + 1
worksheet_recipes.cell(row=1, column=n_reviews_col, value='n_reviews')

for row_idx in range(2, worksheet_recipes.max_row + 1):
    recipe_id = worksheet_recipes.cell(row=row_idx, column=1).value
    worksheet_recipes.cell(row=row_idx, column=n_reviews_col, value=review_counts.get(recipe_id, 0))

workbook.save('/content/drive/MyDrive/recipes.xlsx')

"""8. Напишите функцию `validate()`, которая проверяет соответствие всех строк из листа `Отзывы` следующим правилам:\n",
    "    * Рейтинг - это число от 0 до 5 включительно\n",
    "    * Соответствующий рецепт имеется на листе `Рецепты`\n",
    "    \n",
    "В случае несоответствия этим правилам, выделите строку красным цветом"
"""

from openpyxl import load_workbook
from openpyxl.styles import PatternFill

def validate():
    workbook = load_workbook('/content/drive/MyDrive/recipes.xlsx')
    worksheet_recipes = workbook['Рецепты']
    worksheet_reviews = workbook['Отзывы']

    recipe_ids = set(row[0] for row in worksheet_recipes.iter_rows(min_row=2, min_col=1, max_col=1, values_only=True))
    red_fill = PatternFill(start_color='FF0000', end_color='FF0000', fill_type='solid')

    for row in worksheet_reviews.iter_rows(min_row=2, values_only=False):
        review_id = row[0].value
        recipe_id = row[1].value
        rating = row[2].value

        if not (0 <= rating <= 5):
            for cell in row:
                cell.fill = red_fill
        if recipe_id not in recipe_ids:
            for cell in row:
                cell.fill = red_fill
workbook.save('/content/drive/MyDrive/recipes.xlsx')

validate()

"""9. В файле `recipes_model.csv` находится модель данных предметной области \"рецепты\". При помощи пакета `csv` считайте эти данные. При помощи пакета `xlwings` запишите данные на лист `Модель` книги `recipes_model.xlsx`, начиная с ячейки `A2`, не используя циклы. Сделайте скриншот текущего состояния листа и прикрепите в ячейку ноутбука."""

import csv
from openpyxl import Workbook

with open('/content/drive/MyDrive/recipes_model.csv', mode='r') as file:
    csv_reader = csv.reader(file)
    model_data = list(csv_reader)

workbook = Workbook()
worksheet = workbook.active
worksheet.title = 'Модель'

for row in model_data:
    worksheet.append(row)

workbook.save('/content/drive/MyDrive/recipes_model.xlsx')

"""10. При помощи пакета `xlwings` добавьте в столбец J формулу для описания столбца на языке SQL. Формула должна реализовывать следующую логику:\n",
    "\n",
    "    1\\. в начале строки идут значения из столбцов В и C (значение столбца С приведено к верхнему регистру), разделенные пробелом\n",
    "    \n",
    "    2\\. далее идут слова на основе столбца \"Ключ\"\n",
    "        2.1 если в столбце \"Ключ\" указано значение \"PK\", то дальше через пробел идет ключевое слово \"PRIMARY KEY\"\n",
    "        2.2 если в столбце \"Ключ\" указано значение \"FK\", то дальше через пробел идет ключевое слово \"REFERENCES\", затем значения столбцов H и I в формате \"название_таблицы(название_столбца)\"\n",
    "        \n",
    "    3\\. если в столбце \"Обязательно к заполнению\" указано значение \"Y\" и в столбце \"Ключ\" указано не \"PK\", то дальше через пробел идет ключевое слово \"NOT NULL\".\n",
    "\n",
    "Заполните этой формулой необходимое количество строк, используя \"протягивание\". Количество строк для протягивания определите на основе данных.\n",
    "\n",
    "Сделайте скриншот текущего состояния листа и прикрепите в ячейку ноутбука."
"""

from openpyxl import load_workbook

workbook = load_workbook('/content/drive/MyDrive/recipes_model.xlsx')
worksheet = workbook['Модель']
num_rows = worksheet.max_row

for row_idx in range(2, num_rows + 1):
    col_b = worksheet.cell(row=row_idx, column=2).value
    col_c = worksheet.cell(row=row_idx, column=3).value
    key = worksheet.cell(row=row_idx, column=6).value
    required = worksheet.cell(row=row_idx, column=7).value

    if col_c is not None:
        col_c_upper = col_c.upper()
    else:
        col_c_upper = ""

    formula = f'{col_b} {col_c_upper}'
    if key == "PK":
        formula += ' PRIMARY KEY'
    elif key == "FK":
        formula += f' REFERENCES {required}'

    if required == "Y" and key != "PK":
        formula += ' NOT NULL'
    worksheet.cell(row=row_idx, column=10).value = formula

workbook.save('/content/drive/MyDrive/recipes_model.xlsx')

"""11. При помощи пакета `xlwings` измените стилизацию листа `Модель`.\n",
    "* для заголовков добавьте заливку цвета `00ccff`\n",
    "* примените автоподбор ширины столбца;\n",
    "* сделайте шрифт заголовков полужирным;\n",
    "* добавьте таблице автофильтр.\n",
    "\n",
    "Сделайте скриншот текущего состояния листа и прикрепите в ячейку ноутбука."
"""

from openpyxl.styles import PatternFill, Font

workbook = load_workbook('/content/drive/MyDrive/recipes_model.xlsx')
worksheet = workbook['Модель']
header_fill = PatternFill(start_color='00ccff', end_color='00ccff', fill_type='solid')

for cell in worksheet[1]:
    cell.font = Font(bold=True)
    cell.fill = header_fill

for col in worksheet.columns:
    max_length = 0
    column = col[0].column_letter
    for cell in col:
        try:
            if len(str(cell.value)) > max_length:
                max_length = len(cell.value)
        except:
            pass
    adjusted_width = (max_length + 2)
    worksheet.column_dimensions[column].width = adjusted_width

worksheet.auto_filter.ref = worksheet.dimensions

workbook.save('/content/drive/MyDrive/recipes_model.xlsx')

"""12. Посчитайте количество атрибутов для каждой из сущностей. Создайте лист `Статистика` и запишите в него результат группировки, начиная с ячейки \"А1\". Визуализируйте полученный результат при помощи столбчатой диаграммы. Сохраните полученную визуализацию на лист `Статистика`, начиная с ячейки \"E2\".  Сделайте скриншот листа `Статистика` и прикрепите в ячейку ноутбука.\n",
    "\n",
    "* Вы можете воспользоваться методами для визуализации, которые поставляются вместе с объектами `pandas` (см. https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.plot) "
"""

import pandas as pd
import matplotlib.pyplot as plt

recipes_model_df = pd.read_csv('/content/drive/MyDrive/recipes_model.csv', sep='\t', skiprows=1)

if 'recipe' not in recipes_model_df.columns:
    raise ValueError("Столбец 'recipe' не найден в DataFrame.")

entity_attribute_count = recipes_model_df['recipe'].value_counts().reset_index()
entity_attribute_count.columns = ['Entity', 'Attribute Count']

with pd.ExcelWriter('/content/drive/MyDrive/recipes_model.xlsx', engine='openpyxl') as writer:
    entity_attribute_count.to_excel(writer, index=False, sheet_name='Статистика')

entity_attribute_count.plot(kind='bar', x='Entity', y='Attribute Count', color='skyblue')
plt.title('Количество атрибутов для каждой сущности')
plt.xlabel('Сущность')
plt.ylabel('Количество атрибутов')
plt.xticks(rotation=45)
plt.savefig('/content/drive/MyDrive/entity_attribute_count.png')
plt.close()
