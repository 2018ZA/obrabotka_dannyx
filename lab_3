# -*- coding: utf-8 -*-
"""Лабораторная работа №3.ipynb

1.1 Считайте файл contributors_sample.json. Воспользовавшись модулем json, преобразуйте содержимое файла в соответствующие объекты python. Выведите на экран информацию о первых 3 пользователях.
"""

import json
class User:

    def __init__(self, username, name, sex, address, mail, jobs, id):
        self.username = username
        self.name = name
        self.sex = sex
        self.address = address
        self.mail = mail
        self.jobs = jobs
        self.id = id

    def __str__(self) -> str:
        jobs_str = ", ".join(self.jobs)
        return f"\nId: {self.id}\nUsername: {self.username}\nName: {self.name}\nSex: {self.sex}\naddress: {self.address}\nmail: {self.mail}\njobs: {jobs_str}\n\n#########################"


with open('/content/drive/MyDrive/contributors_sample.json', 'r', encoding='utf8') as f:
    data = json.load(f)

user_l = []
for i in data:
    user_l.append(User(**i))

for usr in user_l[:3]:
    print(usr)

"""1.2 Выведите уникальные почтовые домены, содержащиеся в почтовых адресах людей"""

l = []
for i in data:
    dom = i['mail'].split('@')[1]
    if dom not in l:
        l.append(i['mail'].split('@')[1])

print(l)

"""1.3 Напишите функцию, которая по username ищет человека и выводит информацию о нем. Если пользователь с заданным username отсутствует, возбудите исключение ValueError"""

def find_username(username):
    try:
        for item in data:
            if username == item['username']:
                print(item)
                return

        raise ValueError
    except ValueError:
        print('Error: пользователь не найден')

find_username(input())

"""1.4 Посчитайте, сколько мужчин и женщин присутсвует в этом наборе данных."""

def male_female():
    m, f = 0, 0
    for i in data:
        if i['sex'] == 'M':
            m += 1
        else:
            f += 1
    return f'Мужчин: {m}, женщин: {f}'

male_female()

"""1.5 Создайте pd.DataFrame contributors, имеющий столбцы id, username и sex."""

import pandas as pd

contributors = pd.read_json('/content/drive/MyDrive/contributors_sample.json').drop(['name', 'address', 'mail', 'jobs'], axis=1)
col = contributors.pop('id')
contributors.insert(0, col.name, col)
print(contributors)

"""1.6 Загрузите данные из файла recipes_sample.csv (ЛР2) в таблицу recipes. Объедините recipes с таблицей contributors с сохранением строк в том случае, если информация о человеке отсутствует в JSON-файле. Для скольких человек информация отсутствует?"""

recipes = pd.read_csv('/content/drive/MyDrive/recipes_sample.csv', sep=',')
recipes = recipes.merge(contributors, left_on='contributor_id', right_on='id', how='left')
recipes = recipes[pd.isna(recipes['id_y'])]
print(len(recipes['contributor_id'].unique()))

"""2.1 На основе файла contributors_sample.json создайте словарь следующего вида:

{
    должность: [список username людей, занимавших эту должность]
}
"""

with open('/content/drive/MyDrive/contributors_sample.json', 'r', encoding='utf8') as f:
    data = json.load(f)

d = {}
for i in data:
    for job in i['jobs']:
        if job not in d:
            d[job] = []
        d[job].append(i['username'])

print({k:d[k] for k in list(d)})

"""2.2 Сохраните результаты в файл job_people.pickle и в файл job_people.json с использованием форматов pickle и JSON соответственно. Сравните объемы получившихся файлов. При сохранении в JSON укажите аргумент indent."""

import pickle
import json
import os

with open('job_people.pickle', 'wb') as f:
    pickle.dump(d, f)

with open('job_people.json', 'w') as f:
    json.dump(d, f, indent=1)

import os
print('pickle :', os.path.getsize('job_people.pickle'))
print('json   :', os.path.getsize('job_people.json'))

"""2.3 Считайте файл job_people.pickle и продемонстрируйте, что данные считались корректно."""

with open('job_people.pickle', 'rb') as f:
    d_pickle = pickle.load(f)

print({k: d_pickle[k] for k in list(d_pickle) [:3]})

"""3.1 По данным файла steps_sample.xml сформируйте словарь с шагами по каждому рецепту вида {id_рецепта: ["шаг1", "шаг2"]}. Сохраните этот словарь в файл steps_sample.json"""

from bs4 import BeautifulSoup

with open('/content/drive/MyDrive/steps_sample.xml') as f:
    data = BeautifulSoup(f, features="xml")

recipe_book = {}
for recipe in data.find_all('recipe'):
    id = recipe.find('id')
    if id.text not in recipe_book:
        recipe_book[id.text] = []
    for step in recipe.find_all('step'):
        recipe_book[id.text].append(step.text)

with open('steps_sample.json', 'w') as f:
    json.dump(recipe_book, f)

"""3.2 По данным файла steps_sample.xml сформируйте словарь следующего вида: кол-во_шагов_в_рецепте: [список_id_рецептов]"""

from bs4 import BeautifulSoup

with open('/content/drive/MyDrive/steps_sample.xml', 'r') as file:
    data = file.read()

data_xml = BeautifulSoup(data, 'xml')

step_recipe = {}
for recipe in data_xml.find_all('recipe'):
    step_count = len(recipe.find_all('step'))
    if step_count not in step_recipe:
        step_recipe[step_count] = []
    step_recipe[step_count].append(recipe.find('id').text)

print({k: step_recipe[k] for k in list(step_recipe)[:2]})

"""3.3 Получите список рецептов, в этапах выполнения которых есть информация о времени (часы или минуты). Для отбора подходящих рецептов обратите внимание на атрибуты соответствующих тэгов."""

recipes_with_time = []

for recipe in data_xml.find_all('recipe'):
    for step in recipe.find_all('step'):

        if 'has_minutes' in step.attrs or 'has_hours' in step.attrs:
            recipes_with_time.append(recipe.find('id').text)
            break


print(recipes_with_time[:5])

"""3.4 Загрузите данные из файла recipes_sample.csv (ЛР2) в таблицу recipes. Для строк, которые содержат пропуски в столбце n_steps, заполните этот столбец на основе файла steps_sample.xml. Строки, в которых столбец n_steps заполнен, оставьте без изменений."""

from bs4 import BeautifulSoup
import pandas as pd
import numpy as np

with open('/content/drive/MyDrive/steps_sample.xml', 'r') as file:
    html_data = file.read()
soup = BeautifulSoup(html_data, 'html.parser')
recipes = pd.read_csv('/content/drive/MyDrive/recipes_sample.csv', sep=',')

for recipe in soup.find_all('recipe'):
    id = int(recipe.find('id').text)
    if np.isnan(recipes[recipes['id'] == id]['n_steps'].values[0]):
        recipes.loc[recipes.id == id, 'n_steps'] = len(recipe.find_all('step'))

print(recipes)

"""3.5 Проверьте, содержит ли столбец n_steps пропуски. Если нет, то преобразуйте его к целочисленному типу и сохраните результаты в файл recipes_sample_with_filled_nsteps.csv"""

import numpy as np
if recipes["n_steps"].isna().sum() == 0:
    recipes["n_steps"] = recipes["n_steps"].astype(np.int32)
    recipes.to_csv("/content/drive/MyDrive/recipes_sample_with_filled_nsteps.csv", index=False)
